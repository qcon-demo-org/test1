name: IPFS Public Nodes Workflow

on:
  workflow_dispatch:
  
jobs:
  ipfs-public-nodes-job:
    runs-on: ubuntu-latest

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@rc
      with:
          egress-policy: audit
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install IPFS HTTP Client
      run: npm install ipfs-http-client@50.1.2

    - name: Interact with Public IPFS Nodes
      run: |
        node -e "
        const { create } = require('ipfs-http-client');

        async function main() {
          // Connect to a public IPFS gateway
          const client = create({ url: 'https://ipfs.infura.io:5001' });

          try {
            // Add content to IPFS
            const { cid } = await client.add('Hello from GitHub Actions!');
            console.log('Added content with CID:', cid.toString());

            // Retrieve the content
            let content = '';
            for await (const chunk of client.cat(cid)) {
              content += chunk.toString();
            }
            console.log('Retrieved content:', content);

            // List peers
            const peerIds = await client.swarm.peers();
            console.log('Connected peers:', peerIds.length);
            peerIds.slice(0, 5).forEach(peer => console.log(peer.peer));

            // Fetch a known IPFS object (IPFS logo)
            const ipfsLogoCid = 'QmTkzDwWqPbnAh5YiV5VwcTLnGdwSNsNTn2aDxdXBFca7D';
            let logoContent = '';
            for await (const chunk of client.cat(ipfsLogoCid)) {
              logoContent += chunk.toString().slice(0, 100); // Just get the first 100 chars
            }
            console.log('IPFS Logo content (first 100 chars):', logoContent);

          } catch (error) {
            console.error('Error:', error.message);
          }
        }

        main().catch(console.error);
        "
